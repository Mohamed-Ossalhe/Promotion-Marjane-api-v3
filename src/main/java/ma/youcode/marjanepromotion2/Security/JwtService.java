package ma.youcode.marjanepromotion2.Security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import ma.youcode.marjanepromotion2.Utils.dotenv;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

/**
 * Utility class that provides methods for building, decomposing and validating JWT tokens.
 *
 * @author Mohamed Ossalhe
 * @version 1.0
 */
@Service
public class JwtService {

    /**
     *
     * @param jwt Json Web Token generated while authentication
     * @return String - returns extracted username authenticated
     */
    public String extractUserName(String jwt) {
        return extractClaim(jwt, Claims::getSubject);
    }

    /**
     *
     * @param userDetails implementation of {@link UserDetails} interface with user data
     * @return Jwt returns token generated by generateToken
     */
    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }

    /**
     *
     * @param extraClaims dictionary with claims that should be written inside the token body
     * @param userDetails implementation of {@link UserDetails} interface with user data
     * @return Jwt - returns generated token
     */
    public String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {
        return Jwts
                .builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
                .signWith(getSigninKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    /**
     *
     * @param token token to decompose
     * @param resolver function that can extract claim from a token body
     * @return extracted claim value
     * @param <T> type of claim to extract
     */
    public <T> T extractClaim(String token, Function<Claims, T> resolver) {
        final Claims claims = extractAllClaims(token);
        return resolver.apply(claims);
    }

    /**
     *
     * @param token token to extract claims.
     * @return Claims
     */
    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSigninKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     *
     * @return Key - returns sign in key decoded
     */
    private Key getSigninKey() {
        byte[] keyBytes = Decoders.BASE64.decode(dotenv.get("JWT_SECRET"));
        return Keys.hmacShaKeyFor(keyBytes);
    }

    /**
     *
     * @param token token to validate
     * @param userDetails implementation of {@link UserDetails} interface with user data
     * @return boolean - {@code true} if token is not valid anymore and {@code false} - otherwise
     */
    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUserName(token);
        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);
    }

    /**
     *
     * @param token token to check
     * @return {@code true} if token is expired and {@code false} - otherwise
     */
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    /**
     *
     * @param token token to extract expiration time
     * @return Date returns token expiration time
     */
    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
}
